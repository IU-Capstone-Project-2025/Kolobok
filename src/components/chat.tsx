import React, { useState } from "react";
import "@fontsource/roboto-condensed";
import "../styles/kolochat.css";
import Logo from "../static/KOLOBOK.svg";
import { useNavigate } from "react-router-dom";
import { analyzeThread, extractInformation } from "../api/api";

interface Message {
  text: string;
  sender: "user" | "bot";
  image?: string;
}

type Mode = 'analyze' | 'identify' | null;

export default function KolobokChat() {
  const [messages, setMessages] = useState<Message[]>([
    { text: "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ '–ê–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤' –∏–ª–∏ '–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å'", sender: "bot" },
  ]);
  const [inputValue, setInputValue] = useState("");
  const [mode, setMode] = useState<Mode>(null);
  const navigate = useNavigate();

  const appendMessage = (msg: Message) => {
    setMessages((prev) => [...prev, msg]);
  };

  const handleGoToMain = () => {
    navigate("/");
  };

  const handleSendMessage = () => {
    const trimmed = inputValue.trim();
    if (!trimmed) return;

    appendMessage({ text: trimmed, sender: "user" });

    if (trimmed.toLowerCase() === '–∞–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤') {
      setMode('analyze');
      appendMessage({ text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞.", sender: "bot" });
    } else if (trimmed.toLowerCase() === '–º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å') {
      setMode('identify');
      appendMessage({ text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏.", sender: "bot" });
    } else {
      appendMessage({ text: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–ø–∏—à–∏ '–ê–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤' –∏–ª–∏ '–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å'.", sender: "bot" });
    }

    setInputValue("");
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const input = e.target;
    const file = input.files?.[0];
    if (!file) return;

    if (file.size > 5 * 1024 * 1024) {
      alert("–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ‚â§5 –ú–±.");
      input.value = '';
      return;
    }
    if (!["image/jpeg", "image/png"].includes(file.type)) {
      alert("–¢–æ–ª—å–∫–æ JPG/PNG, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.");
      input.value = '';
      return;
    }

    const reader = new FileReader();
    reader.onloadend = async () => {
      const dataUrl = reader.result as string;
      appendMessage({ text: dataUrl, sender: "user", image: dataUrl });
      setInputValue("");

      if (!mode) {
        appendMessage({ text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É: '–ê–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤' –∏–ª–∏ '–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å'.", sender: "bot" });
        input.value = '';
        return;
      }

      const base64 = dataUrl.split(",")[1];

      if (mode === 'analyze') {
        try {
          const threadRes = await analyzeThread(base64);
          const depth = threadRes.thread_depth.toFixed(2);
          const total = threadRes.spikes.length;
          const bad = threadRes.spikes.filter(s => s.class === 1).length;
          const good = total - bad;
          const badPerc = ((bad / total) * 100).toFixed(1);
          const goodPerc = ((good / total) * 100).toFixed(1);

          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
          appendMessage({ sender: "bot", text: `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞:` });
          appendMessage({ sender: "bot", text: `‚úÖ –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞: ${depth} –º–º` });
          appendMessage({ sender: "bot", text: `‚úÖ –ê–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤:\n–í—Å–µ–≥–æ —à–∏–ø–æ–≤: ${total}\n–•–æ—Ä–æ—à–∏–µ: ${good} (${goodPerc}%)\n–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ: ${bad} (${badPerc}%)` });
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          appendMessage({ sender: "bot", image: `data:image/png;base64,${threadRes.image}`, text: "–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:" });
        } catch (err: any) {
          appendMessage({ sender: "bot", text: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${err.message}` });
        }
      } else {
        // mode === 'identify'
        try {
          const infoRes = await extractInformation(base64);
          if (infoRes.index_results?.length) {
            infoRes.index_results
              .sort((a, b) => b.combined_score - a.combined_score)
              .forEach((item, idx) => {
                const percent = (item.combined_score * 100).toFixed(1);
                let emoji = 'üî¥'; let label = '–ù–∏–∑–∫–∞—è';
                if (item.combined_score >= 0.8) {
                  emoji = 'üü¢'; label = '–í—ã—Å–æ–∫–∞—è';
                } else if (item.combined_score >= 0.6) {
                  emoji = 'üü°'; label = '–°—Ä–µ–¥–Ω—è—è';
                }
                const text = `${emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç ${idx + 1}:
–õ–∏–Ω–µ–π–∫–∞ (–ë—Ä–µ–Ω–¥): ${item.brand_name}
–ú–æ–¥–µ–ª—å: ${item.model_name}
–†–∞–∑–º–µ—Ä: ${infoRes.tire_size}
–¢–æ—á–Ω–æ—Å—Ç—å: ${label} (${percent}%)`;
                appendMessage({ sender: "bot", text });
              });
          } else {
            appendMessage({ sender: "bot", text: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —à–∏–Ω—ã." });
          }
        } catch (err: any) {
          appendMessage({ sender: "bot", text: `–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${err.message}` });
        }
      }

      setMode(null);
      input.value = '';
    };

    reader.onerror = () => {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.");
      input.value = '';
    };
    reader.readAsDataURL(file);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") handleSendMessage();
  };

  return (
    <div className="kolobok-container">
      <div className="kolobok-header">
        <div className="kolobok-logo" onClick={handleGoToMain}>
          <img src={Logo} alt="Kolobok Logo" />
        </div>
        <button className="kolobok-telegram">Telegram-bot</button>
      </div>

      <div className="chat-window">
        {messages.map((msg, i) => (
          <div key={i} className={`chat-message ${msg.sender}`}>
            {!msg.image && <p>{msg.text}</p>}
            {msg.image && (
              <div className="chat-image">
                <img
                  src={msg.image}
                  alt={msg.sender === "user" ? "–í–∞—à–µ —Ñ–æ—Ç–æ" : "–û—Ç–≤–µ—Ç –±–æ—Ç–∞"}
                  style={{
                    maxWidth: "100%",
                    maxHeight: "300px",
                    objectFit: "contain",
                    borderRadius: "10px",
                    boxShadow: "0 4px 8px rgba(0,0,0,0.2)",
                  }}
                />
                {msg.sender === "bot" && <p style={{ textAlign: "center" }}>–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>}
              </div>
            )}
          </div>
        ))}
         <div className="chat-input">
        <button className="attach-button" onClick={() => document.getElementById("file-input")?.click()}>
          üìé
        </button>
        <input
          type="file"
          accept="image/jpeg, image/png"
          style={{ display: "none" }}
          id="file-input"
          onChange={handleImageUpload}
        />
        <input
          type="text"
          className="message-input"
          placeholder="–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyPress={handleKeyPress}
        />
        <button className="send-button" onClick={handleSendMessage}>
          ‚û§
        </button>
      </div>
      </div>

     
    </div>
  );
}
