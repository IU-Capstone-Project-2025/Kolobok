name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: docker.io

jobs:
  # --- Python Linting ---
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install linting tools
        run: |
          pip install black flake8 isort

      - name: Run Black
        run: |
          black --check --diff ml/ frontend/ tg/

      - name: Run Flake8
        run: |
          flake8 ml/ frontend/ tg/ --max-line-length=88 --ignore=E203,W503

      - name: Run isort
        run: |
          isort --check-only ml/ frontend/ tg/

  # --- JavaScript/CSS Linting ---
  lint-js-css:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install linting tools
        run: |
          npm install -g eslint stylelint

      - name: Run ESLint
        run: |
          eslint frontend/static/*.js || echo "No JS files to lint"

      - name: Run Stylelint
        run: |
          stylelint "frontend/static/*.css" || echo "No CSS files to lint"

  # --- Python Tests ---
  test-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r ml/requirements.txt
          pip install pytest pytest-asyncio pytest-mock
          pip install python-telegram-bot requests pillow

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short

  # --- Build Docker Images ---
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-python, lint-js-css, test-python]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ML image
        uses: docker/build-push-action@v5
        with:
          context: ./ml
          push: false
          tags: kolobok-ml:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: kolobok-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Telegram Bot image
        uses: docker/build-push-action@v5
        with:
          context: ./tg
          push: false
          tags: kolobok-tg:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- Deploy to DockerHub ---
  deploy-dockerhub:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push ML image
        uses: docker/build-push-action@v5
        with:
          context: ./ml
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/kolobok-ml:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/kolobok-ml:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/kolobok-frontend:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/kolobok-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Telegram Bot image
        uses: docker/build-push-action@v5
        with:
          context: ./tg
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/kolobok-tg:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/kolobok-tg:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

 