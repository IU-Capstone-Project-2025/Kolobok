import { useState, useRef, useEffect } from "react";
import "./App.css";
import tireImg from "./assets/tire.png";

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ logic.py + chat)
const STATES = {
  MENU: "MENU",
  SIDE_PHOTO: "SIDE_PHOTO",
  SIDE_RESULT: "SIDE_RESULT",
  SIDE_CUSTOM: "SIDE_CUSTOM",
  TREAD_PHOTO: "TREAD_PHOTO",
  TREAD_RESULT: "TREAD_RESULT",
  TREAD_CUSTOM: "TREAD_CUSTOM",
  CHAT: "CHAT",
};

function App() {
  const [state, setState] = useState(STATES.MENU);
  const [sideCustom, setSideCustom] = useState("");
  const [treadCustom, setTreadCustom] = useState("");
  
  // Chat functionality
  const [messages, setMessages] = useState([]);
  const [chatInput, setChatInput] = useState("");
  const [selectedFile, setSelectedFile] = useState(null);
  const fileInputRef = useRef(null);
  const messagesEndRef = useRef(null);

  // Auto-scroll to bottom of chat
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Load chat history from localStorage
  useEffect(() => {
    const savedMessages = localStorage.getItem('chatHistory');
    if (savedMessages) {
      setMessages(JSON.parse(savedMessages));
    }
  }, []);

  // Save messages to localStorage
  useEffect(() => {
    localStorage.setItem('chatHistory', JSON.stringify(messages));
  }, [messages]);

  const sendMessage = async (text, imageUrl = null) => {
    const newMessage = { role: 'user', text, image: imageUrl };
    const updatedMessages = [...messages, newMessage];
    setMessages(updatedMessages);
    
    // Simulate bot response (like in the original chat.js)
    setTimeout(() => {
      const botResponse = { role: 'bot', text: 'GOIDA' };
      setMessages(prev => [...prev, botResponse]);
    }, 1000);
  };

  const handleChatSubmit = async (e) => {
    e.preventDefault();
    if (!chatInput.trim() && !selectedFile) return;

    let imageUrl = null;
    if (selectedFile) {
      // In a real app, you'd upload to server
      // For now, create a local URL
      imageUrl = URL.createObjectURL(selectedFile);
    }

    await sendMessage(chatInput, imageUrl);
    setChatInput("");
    setSelectedFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file);
  };

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —Å—Ç–∏–ª–µ–º
  if (state === STATES.MENU) {
    return (
      <>
        <header>
          <span className="logo">Kolobok</span>
        </header>
        <main>
          <div className="left-block">
            <div className="blob">
              <img src={tireImg} alt="tire" className="tire-img" />
            </div>
          </div>
          <div className="right-block">
            <h1>
              –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?
              <span className="custom-bar" />
            </h1>
            <div className="buttons">
              <button onClick={() => setState(STATES.SIDE_PHOTO)}>
                <span>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å —à–∏–Ω—ã</span>
              </button>
              <button onClick={() => setState(STATES.TREAD_PHOTO)}>
                <span>–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞</span>
              </button>
              <button onClick={() => setState(STATES.CHAT)}>
                <span>–ß–∞—Ç —Å –±–æ—Ç–æ–º</span>
              </button>
            </div>
          </div>
        </main>
      </>
    );
  }

  // CHAT: Chat interface with original class names
  if (state === STATES.CHAT) {
    return (
      <>
        <header>
          <span className="logo" style={{ cursor: 'pointer' }} onClick={() => setState(STATES.MENU)}>Kolobok</span>
        </header>
        <main>
          <div className="chat-container">
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
              <h2>–ß–∞—Ç —Å –±–æ—Ç–æ–º</h2>
              <button onClick={() => setState(STATES.MENU)}>–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</button>
            </div>
            <div className="messages">
              {messages.map((msg, index) => (
                <div key={index} className={`message ${msg.role}`}>
                  {msg.text && <div>{msg.text}</div>}
                  {msg.image && (
                    <img
                      src={msg.image}
                      alt="uploaded"
                    />
                  )}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            <form className="input-area" onSubmit={handleChatSubmit}>
              <input
                type="text"
                value={chatInput}
                onChange={(e) => setChatInput(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              />
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                accept="image/*"
                style={{ display: 'none' }}
              />
              <span className="attach-icon" onClick={() => fileInputRef.current?.click()} title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
                üì∑
              </span>
              <button type="submit" className="send-btn" title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">
                <svg width="28" height="28" viewBox="0 0 24 24"><path fill="#a259e6" d="M2 21l21-9-21-9v7l15 2-15 2z"/></svg>
              </button>
            </form>
            {selectedFile && (
              <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
                –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selectedFile.name}
              </div>
            )}
          </div>
        </main>
      </>
    );
  }

  // SIDE_PHOTO: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ (–∏–º–∏—Ç–∞—Ü–∏—è)
  if (state === STATES.SIDE_PHOTO) {
    return (
      <main>
        <div className="right-block">
          <h2>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–æ–∫–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —à–∏–Ω—ã</h2>
          <div className="buttons">
            <button onClick={() => setState(STATES.SIDE_RESULT)}>
              –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–∞–ª–µ–µ)
            </button>
            <button onClick={() => setState(STATES.MENU)}>–ù–∞–∑–∞–¥</button>
          </div>
        </div>
      </main>
    );
  }

  // SIDE_RESULT: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
  if (state === STATES.SIDE_RESULT) {
    return (
      <main>
        <div className="right-block">
          <h2>–ú–∞—Ä–∫–∞: ‚Ä¶<br />–ú–æ–¥–µ–ª—å: ‚Ä¶<br />–î–∏–∞–º–µ—Ç—Ä: ‚Ä¶</h2>
          <div className="buttons">
            <button onClick={() => setState(STATES.MENU)}>OK</button>
            <button onClick={() => setState(STATES.SIDE_CUSTOM)}>–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</button>
          </div>
        </div>
      </main>
    );
  }

  // SIDE_CUSTOM: –í–≤–æ–¥ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  if (state === STATES.SIDE_CUSTOM) {
    return (
      <main>
        <div className="right-block">
          <h2>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –º–∞—Ä–∫–∏, –º–æ–¥–µ–ª–∏ –∏ –¥–∏–∞–º–µ—Ç—Ä–∞ —à–∏–Ω—ã:</h2>
          <input
            type="text"
            value={sideCustom}
            onChange={e => setSideCustom(e.target.value)}
            placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç..."
            style={{ fontSize: 22, padding: 8, borderRadius: 8, border: '1px solid #a259e6', marginBottom: 16 }}
          />
          <div className="buttons">
            <button onClick={() => setState(STATES.MENU)}>
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>
      </main>
    );
  }

  // TREAD_PHOTO: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
  if (state === STATES.TREAD_PHOTO) {
    return (
      <main>
        <div className="right-block">
          <h2>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ —à–∏–Ω—ã.<br />–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —à–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ</h2>
          <div className="buttons">
            <button onClick={() => setState(STATES.TREAD_RESULT)}>
              –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–∞–ª–µ–µ)
            </button>
            <button onClick={() => setState(STATES.MENU)}>–ù–∞–∑–∞–¥</button>
          </div>
        </div>
      </main>
    );
  }

  // TREAD_RESULT: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞
  if (state === STATES.TREAD_RESULT) {
    return (
      <main>
        <div className="right-block">
          <h2>–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞: ‚Ä¶<br />–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∏–Ω: ‚Ä¶</h2>
          <div className="buttons">
            <button onClick={() => setState(STATES.MENU)}>OK</button>
            <button onClick={() => setState(STATES.TREAD_CUSTOM)}>–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç</button>
          </div>
        </div>
      </main>
    );
  }

  // TREAD_CUSTOM: –í–≤–æ–¥ —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  if (state === STATES.TREAD_CUSTOM) {
    return (
      <main>
        <div className="right-block">
          <h2>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≥–ª—É–±–∏–Ω—ã –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∏–Ω:</h2>
          <input
            type="text"
            value={treadCustom}
            onChange={e => setTreadCustom(e.target.value)}
            placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç..."
            style={{ fontSize: 22, padding: 8, borderRadius: 8, border: '1px solid #a259e6', marginBottom: 16 }}
          />
          <div className="buttons">
            <button onClick={() => setState(STATES.MENU)}>
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>
      </main>
    );
  }

  return null;
}

export default App;
