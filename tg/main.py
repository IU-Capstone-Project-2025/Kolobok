import logging
import base64
import requests
import io
import os
from PIL import Image
import time
from functools import wraps

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

BOT_TOKEN = os.environ["BOT_TOKEN"]
APP_URL = "ml:8000"
API_TOKEN = os.environ["API_TOKEN"]

TREAD_ANALYSIS_URL = f"http://{APP_URL}/api/v1/analyze_thread"
TIRE_INFO_EXTRACTION_URL = f"http://{APP_URL}/api/v1/extract_information"

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("tg-bot")


class DropHTTPReqFilter(logging.Filter):
    def filter(self, record: logging.LogRecord) -> bool:
        return "HTTP Request:" not in record.getMessage()


handler = logging.getLogger().handlers[0]
handler.addFilter(DropHTTPReqFilter())

ALLOWED_USERS = os.environ["ALLOWED_USERS"].split(",")


def restricted(func):
    @wraps(func)
    async def wrapper(
        update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs
    ):
        user_id = update.effective_user.id
        if str(user_id) not in ALLOWED_USERS:
            # Optionally log attempt
            logger.info(f"Unauthorized access denied for {user_id}")
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            return  # do not call the handler
        return await func(update, context, *args, **kwargs)

    return wrapper


(
    PASSWORD,
    INCORRECT_PASSWORD,
    MENU,
    SIDE_PHOTO,
    SIDE_RESULT,
    SIDE_CUSTOM,
    TREAD_PHOTO,
    TREAD_RESULT,
    TREAD_CUSTOM,
) = range(9)

# Callback data identifiers
CB_MENU, CB_SIDE, CB_TREAD = "menu", "side", "tread"
CB_SIDE_OK, CB_SIDE_CUSTOM = "side_ok", "side_custom"
CB_TREAD_OK, CB_TREAD_CUSTOM = "tread_ok", "tread_custom"


def build_main_menu() -> InlineKeyboardMarkup:
    """Return the main menu keyboard."""
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤", callback_data=CB_TREAD
                )
            ],
            [InlineKeyboardButton("–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å —à–∏–Ω—ã", callback_data=CB_SIDE)],
        ]
    )


async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Sends the main menu as a new message."""
    if update.callback_query:
        await update.callback_query.answer()
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id, text="–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=build_main_menu()
    )
    return MENU


@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    username = update.effective_user.username
    logger.info(f"User {username} started conversation")
    return await send_main_menu(update, context)


async def menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle main‚Äêmenu button presses."""
    username = update.effective_user.username
    query = update.callback_query
    await query.answer()

    if query.data == CB_SIDE:
        logging.info(f"User {username} picked OCR")
        await query.edit_message_text(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–æ–∫–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —à–∏–Ω—ã")
        return SIDE_PHOTO

    if query.data == CB_TREAD:
        logging.info(f"User {username} picked tread")
        await query.edit_message_text(
            text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ —à–∏–Ω—ã",
        )
        return TREAD_PHOTO

    # CB_MENU ‚Äî redisplay the menu
    return await send_main_menu(update, context)


async def side_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    start = time.perf_counter()
    username = update.effective_user.username
    logger.info(f"User {username} uploaded photo for OCR")
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")

    photo = update.message.photo[-1]
    tg_file = await photo.get_file()

    bio = io.BytesIO()
    await tg_file.download_to_memory(out=bio)
    bio.seek(0)
    logger.info(f"Successfully downloaded photo of {username} to memory")

    b64 = base64.b64encode(bio.read()).decode("utf-8")
    header = {"Authorization": f"Bearer {API_TOKEN}"}
    payload = {"image": b64}

    logger.info(f"Posted response for OCR for {username}")
    resp = requests.post(TIRE_INFO_EXTRACTION_URL, headers=header, json=payload)
    resp.raise_for_status()

    data = resp.json()

    # Extract the index results from the new response format
    index_results = data.get("index_results", [])
    raw_strings = data.get("strings", [])
    tire_size = data.get("tire_size", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")

    logger.info(f"User {username} got the OCR result with {len(index_results)} matches")

    if not index_results:
        await update.message.reply_text(
            "‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å —à–∏–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n\n"
            "üí° **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
            "‚Ä¢ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "‚Ä¢ –ü–ª–æ—Ö–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç –Ω–∞ —à–∏–Ω–µ –Ω–µ—á—ë—Ç–∫–∏–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω\n"
            "‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–∞—Ä–∫–∞ —à–∏–Ω—ã\n\n"
            "üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=CB_SIDE_CUSTOM
                        )
                    ],
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data=CB_MENU)],
                ]
            ),
            parse_mode="Markdown",
        )
        return SIDE_RESULT

    message_parts = ["üîç **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:**\n"]

    # Find the maximum confidence score
    max_confidence = (
        max(match.get("combined_score", 0) for match in index_results)
        if index_results
        else 0
    )

    for i, match in enumerate(index_results, 1):
        brand = match.get("brand_name", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        model = match.get("model_name", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        # Use the tire_size from the top-level response instead of individual matches
        match_tire_size = tire_size
        score = match.get("combined_score", 0)

        confidence_emoji = "üü¢" if score > 0.8 else "üü°" if score > 0.6 else "üî¥"
        confidence_text = (
            "–í—ã—Å–æ–∫–∞—è" if score > 0.8 else "–°—Ä–µ–¥–Ω—è—è" if score > 0.6 else "–ù–∏–∑–∫–∞—è"
        )

        message_parts.append(
            f"{confidence_emoji} **–†–µ–∑—É–ª—å—Ç–∞—Ç {i}:**\n"
            f"–õ–∏–Ω–µ–π–∫–∞ (–ë—Ä–µ–Ω–¥): {brand}\n"
            f"–ú–æ–¥–µ–ª—å: {model}\n"
            f"–†–∞–∑–º–µ—Ä: {match_tire_size}\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {confidence_text} ({score:.1%})\n"
        )

    if max_confidence < 0.8 and raw_strings:
        formatted_strings = ", ".join(f'"{string}"' for string in raw_strings)
        message_parts.append(f"\nüîç **–°—ã—Ä—ã–µ OCR –¥–∞–Ω–Ω—ã–µ:**\n`{formatted_strings}`\n")

    message_parts.append("üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:")

    logger.info(
        f"OCR result for {username}: {len(index_results)} matches found, max confidence: {max_confidence:.3f}"
    )
    await update.message.reply_text(
        "\n".join(message_parts),
        reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data=CB_SIDE_OK)],
                [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=CB_SIDE_CUSTOM)],
            ]
        ),
        parse_mode="Markdown",
    )
    end = time.perf_counter()
    logger.info(f"OCR for {username} complete in {end - start}")
    return SIDE_RESULT


async def side_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle side‚Äêview result buttons."""
    username = update.effective_user.username
    query = update.callback_query
    await query.answer()

    if query.data == CB_SIDE_OK:
        logger.info(f"User {username} agreed with OCR result")
        await context.bot.send_message(
            query.message.chat_id,
            "‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            parse_mode="Markdown",
        )
        return await send_main_menu(update, context)

    # CB_SIDE_CUSTOM
    logger.info(f"User {username} edit the OCR result")
    await context.bot.send_message(
        query.message.chat_id,
        "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é**\n\n"
        "üìã **–§–æ—Ä–º–∞—Ç:**\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –ú–æ–¥–µ–ª—å –†–∞–∑–º–µ—Ä\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä:**\nNokian Hakka Blue 225/60R17",
        parse_mode="Markdown",
    )
    return SIDE_CUSTOM


async def side_custom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle free‚Äêtext for side‚Äêview."""
    username = update.effective_user.username
    user_text = update.message.text
    logging.info(f"User {username} edits OCR result: {user_text}")
    await update.message.reply_text(
        "üôè **–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é!**\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –º–æ–¥–µ–ª—å —Å—Ç–∞–Ω–µ—Ç —Ç–æ—á–Ω–µ–µ.",
        parse_mode="Markdown",
    )
    return await send_main_menu(update, context)


async def tread_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process tread photo"""
    start = time.perf_counter()
    username = update.effective_user.username
    logger.info(f"User {username} uploaded photo for tread")
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")

    photo = update.message.photo[-1]
    tg_file = await photo.get_file()

    bio = io.BytesIO()
    await tg_file.download_to_memory(out=bio)
    bio.seek(0)
    logger.info(f"Successfully downloaded photo of {username} to memory")

    b64 = base64.b64encode(bio.read()).decode("utf-8")
    header = {"Authorization": f"Bearer {API_TOKEN}"}
    payload = {"image": b64, "token": API_TOKEN}

    logger.info(f"Posted response for tread for {username}")
    resp = requests.post(TREAD_ANALYSIS_URL, headers=header, json=payload)
    resp.raise_for_status()

    data = resp.json()
    logger.info(f"User {username} got the tread result: {resp.json().keys()}")
    # logger.info(data)

    if resp.json()["success"] == 0:
        error_detail = resp.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await update.message.reply_text(
            f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞.\n\n"
            f"üîç **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:**\n{error_detail}\n\n"
            f"üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
            f"‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω\n"
            f"‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
            f"‚Ä¢ –ò–∑–±–µ–≥–∞—Ç—å –±–ª–∏–∫–æ–≤ –∏ —Ç–µ–Ω–µ–π",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data=CB_MENU)],
                ]
            ),
            parse_mode="Markdown",
        )
        return MENU

    tread_depth = data["thread_depth"]
    spikes = data["spikes"]
    annotated_image_base64 = data["image"]

    num_bad = sum(spike["class"] == 1 for spike in spikes)
    num_good = len(spikes) - num_bad

    bio = io.BytesIO(base64.b64decode(annotated_image_base64))
    bio.seek(0)
    image = Image.open(bio)
    image.save(bio, format="PNG")
    bio.seek(0)
    await update.message.reply_photo(bio)

    logger.info(
        f"Tread detection result for {username}: tread depth: {tread_depth:.2f}, bad: {num_bad}, good: {num_good}"
    )

    total_spikes = len(spikes)
    good_percentage = (num_good / total_spikes * 100) if total_spikes > 0 else 0
    bad_percentage = (num_bad / total_spikes * 100) if total_spikes > 0 else 0

    # Determine emoji based on condition
    if tread_depth >= 4.0:
        depth_emoji = "‚úÖ"
    elif tread_depth >= 2.0:
        depth_emoji = "‚ö†Ô∏è"
    else:
        depth_emoji = "‚ùå"

    if bad_percentage <= 10:
        spike_emoji = "‚úÖ"
    elif bad_percentage <= 30:
        spike_emoji = "‚ö†Ô∏è"
    else:
        spike_emoji = "‚ùå"

    formatted_message = (
        f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞:**\n\n"
        f"{depth_emoji} **–ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞:** {tread_depth:.2f} –º–º\n\n"
        f"{spike_emoji} **–ê–Ω–∞–ª–∏–∑ —à–∏–ø–æ–≤:**\n"
        f"–í—Å–µ–≥–æ —à–∏–ø–æ–≤: {total_spikes}\n"
        f"–•–æ—Ä–æ—à–∏–µ: {num_good} ({good_percentage:.1f}%)\n"
        f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ: {num_bad} ({bad_percentage:.1f}%)"
    )

    # Add critical warnings only when necessary
    if tread_depth < 1.6:
        formatted_message += "\n\n‚ùå **–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞!**"
    elif tread_depth < 2.0 or bad_percentage > 30:
        formatted_message += "\n\n‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è**"

    await update.message.reply_text(
        formatted_message,
        reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", callback_data=CB_TREAD_OK)],
                [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=CB_TREAD_CUSTOM)],
            ]
        ),
        parse_mode="Markdown",
    )
    end = time.perf_counter()
    logger.info(f"Tread for {username} complete in {end - start}")
    return TREAD_RESULT


async def tread_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle tread result buttons."""
    username = update.effective_user.username
    query = update.callback_query
    await query.answer()

    if query.data == CB_TREAD_OK:
        logger.info(f"User {username} agreed with tread result")
        await context.bot.send_message(
            query.message.chat_id,
            "‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            parse_mode="Markdown",
        )
        return await send_main_menu(update, context)

    # CB_TREAD_CUSTOM
    logger.info(f"User {username} edits tread result")
    await context.bot.send_message(
        query.message.chat_id,
        "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ**\n\n"
        "üìã **–£–∫–∞–∂–∏—Ç–µ:**\n"
        "‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞ (–º–º)\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–∏—Ö —à–∏–ø–æ–≤\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —à–∏–ø–æ–≤\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä:**\n3.5 –º–º, —Ö–æ—Ä–æ—à–∏–µ: 45, –ø–ª–æ—Ö–∏–µ: 5",
        parse_mode="Markdown",
    )
    return TREAD_CUSTOM


async def tread_custom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle free‚Äêtext for tread."""
    user_text = update.message.text
    username = update.effective_user.username
    logger.info(f"{username} edit for tread: {user_text}")
    await update.message.reply_text(
        "üôè **–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é!**\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –º–æ–¥–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ.",
        parse_mode="Markdown",
    )
    return await send_main_menu(update, context)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /cancel to end conversation."""
    username = update.effective_user.username
    await update.message.reply_text("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    logger.info(f"User {username} ended the conversation")
    return ConversationHandler.END


def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [CallbackQueryHandler(menu_choice)],
            SIDE_PHOTO: [MessageHandler(filters.PHOTO, side_photo)],
            SIDE_RESULT: [CallbackQueryHandler(side_result)],
            SIDE_CUSTOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, side_custom)],
            TREAD_PHOTO: [MessageHandler(filters.PHOTO, tread_photo)],
            TREAD_RESULT: [CallbackQueryHandler(tread_result)],
            TREAD_CUSTOM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, tread_custom)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
